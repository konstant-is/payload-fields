{"version":3,"sources":["../src/index.ts","../src/lib/deep.ts","../src/lib/string.ts","../src/fields/fields.ts","../src/fields/fields-common.ts","../src/fields/slug.ts","../src/lib/createBlock.ts","../src/lib/createCollection.ts","../src/lib/createGlobal.ts","../src/lib/useBlocks.ts"],"sourcesContent":["export * from \"./fields\";\nexport * from \"./lib\";\n","// @ts-nocheck\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nexport function isObject(item: unknown): boolean {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function deepMerge<T, R>(target: T, source: R): T {\n  const output = { ...target };\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] });\n        } else {\n          output[key] = deepMerge(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n\n  return output;\n}\n","import slugifyDep from \"slugify\";\n\nexport const capitalize = (s: string | undefined | null): string =>\n  (s?.length && s.charAt(0).toUpperCase() + s.slice(1)) || \"\";\n\nexport const slugify = (value: string = \"\") =>\n  slugifyDep(value, {\n    lower: true,\n    trim: true,\n  });\n","import { deepMerge } from \"../lib/deep\";\nimport { capitalize } from \"../lib/string\";\nimport { RowLabelFunction } from \"payload/dist/admin/components/forms/RowLabel/types\";\nimport {\n  ArrayField,\n  BlockField,\n  CheckboxField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GroupField,\n  JSONField,\n  NumberField,\n  PointField,\n  PolymorphicRelationshipField,\n  RadioField,\n  RelationshipField,\n  RichTextField,\n  RowField,\n  SelectField,\n  SingleRelationshipField,\n  Tab,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from \"payload/types\";\n\nconst fieldBaseProps = <T>(props: T) => ({\n  required: true,\n  localized: true,\n  ...props,\n});\n\nexport const field = (props: Field): Field => ({ ...props });\n\nexport const textField = (props: Omit<TextField, \"type\">): TextField => {\n  const type = \"text\";\n  const fieldLabel = props.label ?? capitalize(props.name);\n\n  if (props.hasMany) {\n    return {\n      type,\n      ...fieldBaseProps(props),\n      label: fieldLabel,\n      hasMany: true,\n    };\n  }\n\n  return {\n    type,\n    ...fieldBaseProps(props),\n    label: fieldLabel,\n    hasMany: false,\n    maxRows: undefined,\n    minRows: undefined,\n  };\n};\n\nexport const numberField = (props: Omit<NumberField, \"type\">): NumberField => {\n  if (props.hasMany) {\n    return {\n      type: \"number\",\n      ...fieldBaseProps(props),\n      hasMany: true,\n    };\n  }\n  return {\n    type: \"number\",\n    ...fieldBaseProps(props),\n    hasMany: false,\n    maxRows: undefined,\n    minRows: undefined,\n  };\n};\n\nexport const textAreaField = (\n  props: Omit<TextareaField, \"type\">\n): TextareaField => {\n  return {\n    type: \"textarea\",\n    ...fieldBaseProps(props),\n  };\n};\n\nexport const richTextField = (\n  props: Omit<RichTextField, \"type\">\n): RichTextField => ({\n  type: \"richText\",\n  ...fieldBaseProps(props),\n});\n\nexport const selectField = (props: Omit<SelectField, \"type\">): SelectField => {\n  return {\n    type: \"select\",\n    ...fieldBaseProps(props),\n  };\n};\n\nexport const checkboxField = (\n  props: Omit<CheckboxField, \"type\">\n): CheckboxField => ({\n  type: \"checkbox\",\n  ...fieldBaseProps(props),\n});\n\nexport const radioField = (props: Omit<RadioField, \"type\">): RadioField => {\n  return {\n    type: \"radio\",\n    ...fieldBaseProps(props),\n  };\n};\n\nexport const groupField = (props: Omit<GroupField, \"type\">): GroupField => {\n  const { label, ...rest } = props;\n  return {\n    type: \"group\",\n    label: label === undefined ? false : label,\n    ...fieldBaseProps(rest),\n  };\n};\n\nexport const rowField = (props: Omit<RowField, \"type\">): RowField => ({\n  type: \"row\",\n  ...fieldBaseProps(props),\n});\n\nexport const arrayField = (\n  props: Omit<ArrayField, \"type\"> & { rowLabel?: RowLabelFunction }\n): ArrayField => {\n  const { rowLabel, ...rest } = props;\n\n  const interfaceName = props.interfaceName || props.name;\n\n  return deepMerge(\n    {\n      type: \"array\",\n      ...fieldBaseProps(rest),\n      interfaceName: `${interfaceName}Array`,\n      admin: {\n        initCollapsed: true,\n        components: {\n          RowLabel: rowLabel,\n        },\n      },\n    },\n    { admin: props.admin ?? {} }\n  );\n};\n\nexport const uploadField = (props: Omit<UploadField, \"type\">): UploadField => {\n  return {\n    type: \"upload\",\n    ...fieldBaseProps(props),\n  };\n};\n\nexport const tabsField = (props: Omit<TabsField, \"type\">): TabsField => {\n  return {\n    type: \"tabs\",\n    ...props,\n  };\n};\n\nexport const tabField = (props: Tab): Tab => {\n  return {\n    ...props,\n  };\n};\n\nexport const blockField = (props: Omit<BlockField, \"type\">): BlockField => ({\n  type: \"blocks\",\n  ...props,\n});\n\nexport const relationshipField = (\n  props:\n    | Omit<PolymorphicRelationshipField, \"type\">\n    | Omit<SingleRelationshipField, \"type\">\n): RelationshipField => {\n  if (isPolymorphicRelationshipField(props)) {\n    return {\n      ...fieldBaseProps(props),\n      type: \"relationship\",\n      hasMany: true,\n    };\n  }\n\n  // if (isSingleRelationshipField(props)) {\n  return {\n    type: \"relationship\",\n    ...fieldBaseProps(props),\n    hasMany: false,\n    max: undefined,\n    maxRows: undefined,\n    min: undefined,\n    minRows: undefined,\n  };\n  // }\n};\n\nfunction isSingleRelationshipField(\n  props: Omit<RelationshipField, \"type\">\n): props is SingleRelationshipField {\n  return props.hasMany === false;\n}\n\nfunction isPolymorphicRelationshipField(\n  props: Omit<RelationshipField, \"type\">\n): props is PolymorphicRelationshipField {\n  return props.hasMany === true;\n}\n\nexport const collapsibleField = (\n  props: Omit<CollapsibleField, \"type\">\n): CollapsibleField => {\n  return {\n    type: \"collapsible\",\n    ...props,\n    admin: {\n      initCollapsed: true,\n      ...props.admin,\n    },\n  };\n};\n\nexport const jsonField = (props: Omit<JSONField, \"type\">): JSONField => {\n  return {\n    type: \"json\",\n    ...fieldBaseProps(props),\n  };\n};\n\nexport const dateField = (props: Omit<DateField, \"type\">): DateField => {\n  return {\n    type: \"date\",\n    ...fieldBaseProps(props),\n  };\n};\n\nexport const emailField = (props: Omit<EmailField, \"type\">): EmailField => {\n  return {\n    type: \"email\",\n\n    ...fieldBaseProps(props),\n  };\n};\n\nexport const pointField = (props: Omit<PointField, \"type\">): PointField => {\n  return {\n    type: \"point\",\n    ...fieldBaseProps(props),\n  };\n};\n","import type { Field } from \"payload/types\";\nimport { textAreaField, textField } from \"./fields\";\nimport { FieldProps } from \"./types\";\nimport { deepMerge } from \"../lib/deep\";\nimport { capitalize } from \"../lib/string\";\n\ntype TextFieldProps = FieldProps<{\n  name?: string;\n  label?: string;\n  description?: string;\n}>;\nconst createTextField = (name: string, props?: TextFieldProps) => {\n  const field = textField({\n    name: props?.name ?? name,\n    label: props?.label ?? capitalize(name),\n    required: props?.required,\n    admin: {\n      condition: props?.condition,\n      description: props?.description,\n    },\n  });\n  return deepMerge(field, props?.overrides || {});\n};\n\nconst createTextAreaField = (name: string, props?: TextFieldProps) => {\n  const field = textAreaField({\n    name: props?.name ?? name,\n    label: props?.label ?? capitalize(name),\n    required: props?.required,\n    admin: {\n      condition: props?.condition,\n      description: props?.description,\n    },\n  });\n  return deepMerge(field, props?.overrides || {});\n};\n/**\n * Creates a text field with name: title and label: Title\n * @param props\n * @returns\n */\nexport const titleField = (props?: TextFieldProps): Field => {\n  return createTextField(\"title\", props);\n};\n\nexport const subtitleField = (props?: TextFieldProps): Field => {\n  return createTextField(\"subtitle\", props);\n};\n\nexport const nameField = (props?: TextFieldProps): Field => {\n  return createTextField(\"name\", props);\n};\n\n/**\n * Creates a text field with name: label and label: Label\n * @param props\n * @returns\n */\nexport const labelField = (props?: TextFieldProps) => {\n  return createTextField(\"label\", props);\n};\n\nexport const descriptionField = (\n  props?: FieldProps<{\n    name?: string;\n    label?: string;\n    description?: string;\n  }>\n) => {\n  return createTextAreaField(\"description\", props);\n};\n\nexport const sidebarFields = (props: { fields: Field[] }) => {\n  return props.fields.map((field) => {\n    return deepMerge(field, {\n      admin: {\n        position: \"sidebar\",\n      },\n    });\n  });\n};\n","import { capitalize, slugify } from \"../lib/string\";\nimport type { Field, FieldHook } from \"payload/types\";\n\nimport { textField } from \"./fields\";\nimport { FieldProps } from \"./types\";\n\ntype Props = {\n  name?: string;\n  label?: string;\n  fieldToUse?: string;\n  overrides?: Partial<Field>;\n  readonly?: boolean;\n};\n\nexport const slugField = (props?: FieldProps<Props>): Field => {\n  const name = props?.name ?? \"slug\";\n  const fieldToUse = props?.fieldToUse ?? \"title\";\n\n  const field = textField({\n    name: name,\n    label: props?.label ?? capitalize(name),\n    admin: {\n      position: \"sidebar\",\n      readOnly: props?.readonly,\n    },\n    hooks: {\n      beforeValidate: [formatHook(fieldToUse!)],\n    },\n    index: true,\n\n    ...props,\n  });\n\n  return field;\n};\n\nexport const formatHook =\n  (fallback: string): FieldHook =>\n  ({ data, operation, originalDoc, value }) => {\n    const fallbackData = data?.[fallback] || originalDoc?.[fallback];\n\n    if (typeof value === \"string\" && value === fallbackData) {\n      return slugify(value);\n    }\n\n    if (operation === \"update\") {\n      if (fallbackData && typeof fallbackData === \"string\") {\n        return slugify(fallbackData);\n      }\n    }\n\n    if (operation === \"create\") {\n      if (fallbackData && typeof fallbackData === \"string\") {\n        return slugify(fallbackData);\n      }\n    }\n\n    return value;\n  };\n","import { Block } from \"payload/types\";\n\ntype Props<P = unknown> = P;\n\ntype BlockCreationFunction = <P>(props: Props<P>) => Block;\n\nexport const createBlock = (blockCreationFunction: BlockCreationFunction) => {\n  return (props: Props) => {\n    const result = blockCreationFunction(props);\n    return createBlockHelper(result);\n  };\n};\n\nconst createBlockHelper = (block: Block): Block => {\n  return {\n    ...block,\n    interfaceName: block?.interfaceName || `${block?.slug}Block`,\n  };\n};\n","import { CollectionConfig } from \"payload/types\";\n\nexport const createCollection = (props: CollectionConfig): CollectionConfig => {\n  return {\n    ...props,\n    slug: props.slug,\n    fields: props.fields,\n    access: {\n      read: () => true,\n      ...props.access,\n    },\n  };\n};\n","import { GlobalConfig } from \"payload/types\";\n\nexport const createGlobalConfig = (props: GlobalConfig): GlobalConfig => {\n  return {\n    ...props,\n    access: {\n      read: () => true,\n    },\n  };\n};\n","import { Block } from \"payload/types\";\n\ntype BlockConfig = Record<string, (props: unknown) => Block>;\ntype BlockKey = keyof BlockConfig;\n\nexport const useBlocks = (config: BlockConfig) => {\n  const helper = useBlockHelper({\n    config,\n  });\n\n  return helper;\n};\n\nexport const useBlockHelper = (props: { config: BlockConfig }) => {\n  const { config } = props;\n\n  let blockKeys = Object.keys(config).filter((b) => {\n    const blockSettings = config[b];\n\n    if (typeof blockSettings === \"boolean\" && blockSettings === false) {\n      return false;\n    }\n\n    return true;\n  });\n\n  const exclude = (...blocks: BlockKey[]) => {\n    // Filter out block keys that are included in the blocks parameter\n    blockKeys = blockKeys.filter((key: BlockKey) => !blocks.includes(key));\n    return builder;\n  };\n\n  const filter = (predicate: (value: string, index: number) => boolean) => {\n    blockKeys = blockKeys.filter(predicate);\n  };\n\n  const only = (...blocks: BlockKey[]) => {\n    // Filter out block keys that are not included in the blocks parameter\n    blockKeys = blockKeys.filter((key: BlockKey) => blocks.includes(key));\n    return builder;\n  };\n\n  const build = (params?: unknown): Block[] => {\n    const blocks = blockKeys.map((key) => {\n      const block = config[key];\n\n      if (!block) {\n        console.error(`Block ${key} not found in blockMap`);\n        return null;\n      }\n      return block(params);\n    });\n    return blocks.filter((b) => b !== null) as Block[];\n  };\n\n  const builder = {\n    filter,\n    exclude,\n    build,\n    only,\n  };\n\n  return builder;\n};\n"],"mappings":"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","names":["slugifyDep","field","field"]}